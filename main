import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, OneHotEncoder, SimpleImputer
from sklearn.feature_selection import RFE
from sklearn.metrics import mean_squared_error, accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv('/mnt/data/city_day.csv')

# ----- 3.2 Data Preprocessing -----
# Drop rows with missing target values
data = data.dropna(subset=['AQI', 'AQI_Bucket'])

# Fill missing values for key pollutants using median values
pollutant_columns = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene']
data[pollutant_columns] = data[pollutant_columns].fillna(data.groupby('City')[pollutant_columns].transform('median'))

# Drop columns with excessive missing data or irrelevant features
data = data.drop(columns=['Xylene'])

# Convert 'Date' to datetime format and create seasonal indicators
data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
data['Month'] = data['Date'].dt.month
data['Season'] = data['Month'].apply(lambda x: 'Winter' if x in [12, 1, 2] 
                                      else 'Spring' if x in [3, 4, 5] 
                                      else 'Summer' if x in [6, 7, 8] 
                                      else 'Fall')

# Encoding categorical features with OneHotEncoder
categorical_features = ['City', 'Month', 'Season']
encoded_data = pd.get_dummies(data, columns=categorical_features, drop_first=True)

# Re-encode AQI_Bucket for classification and add it to the dataset
label_encoder = LabelEncoder()
encoded_data['AQI_Bucket_Encoded'] = label_encoder.fit_transform(encoded_data['AQI_Bucket'])

# Impute any remaining NaN values with SimpleImputer
imputer = SimpleImputer(strategy="median")
encoded_data = pd.DataFrame(imputer.fit_transform(encoded_data), columns=encoded_data.columns)

# Normalise features
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(encoded_data[pollutant_columns + 
                                                    [f'{col}_Lag1' for col in pollutant_columns] + 
                                                    [f'{col}_Lag7' for col in pollutant_columns] + 
                                                    [f'{col}_3DayAvg' for col in pollutant_columns] + 
                                                    [f'{col}_7DayAvg' for col in pollutant_columns]])
data_scaled = pd.DataFrame(scaled_features, columns=pollutant_columns + 
                           [f'{col}_Lag1' for col in pollutant_columns] + 
                           [f'{col}_Lag7' for col in pollutant_columns] + 
                           [f'{col}_3DayAvg' for col in pollutant_columns] + 
                           [f'{col}_7DayAvg' for col in pollutant_columns])

# ----- 4.1 Correlation Matrix -----
plt.figure(figsize=(12, 10))
sns.heatmap(encoded_data[pollutant_columns].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix for Pollutants")
plt.show()

# ----- 3.5 Model Training -----
# Split data into training and test sets for classification (using AQI_Bucket_Encoded)
features = encoded_data.drop(columns=['AQI', 'AQI_Bucket', 'AQI_Bucket_Encoded', 'Date'], errors='ignore')
target = encoded_data['AQI_Bucket_Encoded']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)
rf_classifier.fit(X_train, y_train)

# Generate predictions and display confusion matrix
y_pred = rf_classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_encoder.classes_)
disp.plot(cmap='Blues')
plt.title("Confusion Matrix for Random Forest Classifier on AQI Categories")
plt.show()

# ----- 3.4 Feature Selection -----
# RFE for feature selection
rfe = RFE(estimator=LinearRegression(), n_features_to_select=10)
rfe_features = rfe.fit_transform(X_train, y_train)

# ----- Regression model example -----
# Random Forest Regressor
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(data_scaled, data['AQI'], test_size=0.2, random_state=42)
rf_regressor = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
rf_regressor.fit(X_train_reg, y_train_reg)
y_pred_reg = rf_regressor.predict(X_test_reg)
print("RMSE for Random Forest Regressor:", np.sqrt(mean_squared_error(y_test_reg, y_pred_reg)))

